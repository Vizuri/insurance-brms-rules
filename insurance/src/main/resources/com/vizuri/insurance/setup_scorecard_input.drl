package com.vizuri.insurance;

import com.vizuri.insurance.domain.Answer;
import com.vizuri.insurance.domain.Quote;
import com.vizuri.insurance.domain.ScoreCardInput;

import java.util.Calendar;

dialect "mvel"

// this is for first time we insert scorecard input
rule "Reset ScoreCard Input updated flag"
	agenda-group "prepare-scorecard-input"
	salience 10
when 
	$new : ScoreCardInput ( updated == true )
	not $old : ScoreCardInput (updated == false)
then
	modify($new){ setUpdated( false ) }
	System.out.println("******** reset scorecard input");
end;

// this is for answers that are updated for a second or more times
rule "remove old Scorecard input"
	agenda-group "prepare-scorecard-input"
	salience 9
when 
	$new : ScoreCardInput ( updated == true)
	$old : ScoreCardInput ( updated == false )	
then
	System.out.println("******** remove old scorcard input");
	modify($new){ setUpdated( false ) }
	retract( $old );
end

rule "Set fraud as input for scorecard"
	agenda-group "prepare-scorecard-input"
	salience 0
when
	$answer : Answer( questionId == "a.fraud") 	// , updatedValue == false
	$sc : ScoreCardInput(updated == false) 
then
	$sc.setFraud($answer.getBoolValue());
	//modify($sc) {setFraud($answer.getBoolValue()) }
	System.out.println("******** set scorcard input: fraud: " + $answer.getBoolValue());
end

rule "Set FiledForBankrupcy as input for scorecard"
	agenda-group "prepare-scorecard-input"
	salience 0
when
	$answer : Answer( questionId == "a.filedForBankruptcy") 
	$sc : ScoreCardInput(updated == false) 
then
	$sc.setFiledForBankrupcy($answer.getBoolValue());
	//modify($sc) {setFiledForBankrupcy($answer.getBoolValue())}
	System.out.println("******** set scorcard input: FiledForBankrupcy: " + $answer.getBoolValue());
end

rule "Set Child Care Business Exists as input for scorecard"
	agenda-group "prepare-scorecard-input"
	salience 0
when
	$answer : Answer( questionId == "p.childCareBusinessExists") 
	$sc : ScoreCardInput(updated == false) 
then
	$sc.setChildCareBusinessExists($answer.getBoolValue());
	//modify($sc) {setChildCareBusinessExists($answer.getBoolValue()) }
	System.out.println("******** set scorcard input: ChildCareBusinessExists: " + $answer.getBoolValue());
end

rule "Set Property Age as input for scorecard"
	agenda-group "prepare-scorecard-input"
	salience 0
when
	$answer : Answer( questionId == "p.yearBuilt") 
	$sc : ScoreCardInput(updated == false) 
then
	$sc.setPropertyAge(Calendar.getInstance().get(Calendar.YEAR) - $answer.getDecValue() );
	//modify($sc) {setPropertyAge(Calendar.getInstance().get(Calendar.YEAR) - $answer.getDecValue()) }
	System.out.println("******** set scorcard input: Property Age: " + $sc.getPropertyAge());
end

rule "Set Property Roof Age as input for scorecard"
	agenda-group "prepare-scorecard-input"
	salience 0
when
	$answer : Answer( questionId == "p.ageOfRoof") 
	$sc : ScoreCardInput(updated == false) 
then
	$sc.setPropertyRoofAge($answer.getDecValue() + 0.0d);
	//modify($sc) {setPropertyRoofAge($answer.getDecValue() + 0.0d) }
	System.out.println("******** set scorcard input: Property Roof Age: " + $sc.getPropertyRoofAge());
end

rule "Trigger ScoreCard calculation"
	agenda-group "eligibility"
	no-loop true
	salience 10
when 
	$sc : ScoreCardInput ( updated == false )
	$quote : Quote (id != null)
then
	modify($sc){setUpdated(false)}
	modify($quote){ setAmount($quote.getAmount())}
	System.out.println("******** trigger scorecard calculation");
end;