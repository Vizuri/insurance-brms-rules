package com.vizuri.insurance;
import com.vizuri.insurance.domain.*;

dialect "mvel"

rule "test firing agenda group: question-display"
	agenda-group "question-display"
when
	applicant : Applicant( ) 
then
	
	System.out.println("******** Fired test rule for agenda group[question-display]");
end

rule "test firing agenda group: eligibility"
	agenda-group "eligibility"
when
	applicant : Applicant( ) 
then
	
	System.out.println("******** Fired test rule for agenda group[eligibility]");
end

rule "test firing agenda group: quote-error-check"
	agenda-group "quote-error-check"
when
	applicant : Applicant( ) 
then
	
	System.out.println("******** Fired test rule for agenda group[quote-error-check]");
end

rule "test firing agenda group: calculation"
	agenda-group "calculation"
when
	applicant : Applicant( ) 
then
	
	System.out.println("******** Fired test rule for agenda group[calculation]");
end

rule "enableQ18"
dialect "mvel"
no-loop true
agenda-group "question-display"
when
	applicant : Applicant( fraud == true ) 
	question : Question(Id == 18)
then
	question.setEnabled( true );
	update( question );
	System.out.println("Fired rule [enableQ18] for agenda group[question-display]");
end

rule "disableQ18"
dialect "mvel"
no-loop true
agenda-group "question-display"
when
	applicant : Applicant( fraud == null || fraud == false ) 
	question : Question(Id == 18)
then
	question.setEnabled( false );
	update( question );
end

rule "enableQ26"
dialect "mvel"
no-loop true
agenda-group "question-display"
when
	property : Property(childCareBusinessExists == true ) 
	question : Question(Id == 26)
then
	question.setEnabled( true );
	update( question );
end

rule "disableQ26"

	no-loop true
	agenda-group "question-display"
when
	property : Property(childCareBusinessExists == null || childCareBusinessExists == false ) 
	question : Question(Id == 26)
then
	question.setEnabled( false );
	update( question );
end

rule "enableQ27"
	no-loop true
	agenda-group "question-display"
when
	property : Property(childCareLiabilityCoverageRequired == true ) 
	question : Question(Id == 27)
then
	question.setEnabled( true );
	update( question );
end

rule "disableQ27"
	no-loop true
	agenda-group "question-display"
when
	property : Property(childCareLiabilityCoverageRequired == null || childCareLiabilityCoverageRequired == false ) 
	question : Question(Id == 27)
then
	question.setEnabled( false );
	update( question );
end

rule "enableClaims"
	no-loop true
	agenda-group "question-display"
when
	property : Property(previousClaims == true ) 
	question20 : Question(Id == 20)
	question21 : Question(Id == 21)
then
	question20.setEnabled( true );
	question21.setEnabled( true );
	update( question20 );
	update( question21 );
end

rule "disableClaims"
	no-loop true
	agenda-group "question-display"
when
	property : Property(previousClaims == null || previousClaims == false ) 
	question20 : Question(Id == 20)
	question21 : Question(Id == 21)
then
	question20.setEnabled( false );
	question21.setEnabled( false );
	update( question20 );
	update( question21 );
end

rule "enableDogDetails"
	no-loop true
	agenda-group "question-display"
when
	property : Property(dogExists == true ) 
	question23 : Question(Id == 23)
	question24 : Question(Id == 24)
then
	question23.setEnabled( true );
	question24.setEnabled( true );
	update( question23 );
	update( question24 );
end

rule "disableDogDetails"

	no-loop true
	agenda-group "question-display"
when
	property : Property(dogExists == null || dogExists == false ) 
	question23 : Question(Id == 23)
	question24 : Question(Id == 24)
then
	question23.setEnabled( false );
	question24.setEnabled( false );
	update( question23 );
	update( question24 );
end
