package com.vizuri.insurance;
import com.vizuri.insurance.domain.*;

rule "enableQ18"
dialect "mvel"
no-loop true
agenda-group "question-display"
when
	applicant : Applicant( fraud == true ) 
	question : Question(Id == 18)
then
	question.setEnabled( true );
	update( question );
end

rule "disableQ18"
dialect "mvel"
no-loop true
agenda-group "question-display"
when
	applicant : Applicant( fraud == false ) 
	question : Question(Id == 18)
then
	question.setEnabled( false );
	update( question );
end

rule "enableQ26"
dialect "mvel"
no-loop true
agenda-group "question-display"
when
	property : Property(childCareBusinessExists == true ) 
	question : Question(Id == 26)
then
	question.setEnabled( true );
	update( question );
end

rule "disableQ26"
dialect "mvel"
no-loop true
agenda-group "question-display"
when
	property : Property(childCareBusinessExists == false ) 
	question : Question(Id == 26)
then
	question.setEnabled( false );
	update( question );
end

rule "enableQ27"
dialect "mvel"
no-loop true
agenda-group "question-display"
when
	property : Property(childCareLiabilityCoverageRequired == true ) 
	question : Question(Id == 27)
then
	question.setEnabled( true );
	update( question );
end

rule "disableQ27"
dialect "mvel"
no-loop true
agenda-group "question-display"
when
	property : Property(childCareLiabilityCoverageRequired == false ) 
	question : Question(Id == 27)
then
	question.setEnabled( false );
	update( question );
end

rule "enableClaims"
dialect "mvel"
no-loop true
agenda-group "question-display"
when
	property : Property(previousClaims == true ) 
	question20 : Question(Id == 20)
	question21 : Question(Id == 21)
then
	question20.setEnabled( true );
	question21.setEnabled( true );
	update( question20 );
	update( question21 );
end

rule "disableClaims"
dialect "mvel"
no-loop true
agenda-group "question-display"
when
	property : Property(previousClaims == false ) 
	question20 : Question(Id == 20)
	question21 : Question(Id == 21)
then
	question20.setEnabled( false );
	question21.setEnabled( false );
	update( question20 );
	update( question21 );
end

rule "enableDogDetails"
dialect "mvel"
no-loop true
agenda-group "question-display"
when
	property : Property(dogExists == true ) 
	question23 : Question(Id == 23)
	question24 : Question(Id == 24)
then
	question23.setEnabled( true );
	question24.setEnabled( true );
	update( question23 );
	update( question24 );
end

rule "disableDogDetails"
dialect "mvel"
no-loop true
agenda-group "question-display"
when
	property : Property(dogExists == false ) 
	question23 : Question(Id == 23)
	question24 : Question(Id == 24)
then
	question23.setEnabled( false );
	question24.setEnabled( false );
	update( question23 );
	update( question24 );
end

rule "roofTooOld"
dialect "mvel"
no-loop true
agenda-group "eligibility"
when
	property : Property(ageOfRoof >= 25 ) 
then
	property.setStatus("HOLD");
	update (property);
end

rule "bankruptcy"
dialect "mvel"
no-loop true
agenda-group "eligibility"
when
	applicant : Applicant(filedForBankruptcy == true ) 
	property : Property( ) 
then	
	property.setStatus("HOLD");
	update (property);
end

rule "fraud"
dialect "mvel"
no-loop true
agenda-group "eligibility"
when
	applicant : Applicant(fraud == true ) 
	property : Property( ) 
then	
	property.setStatus("DISQUALIFIED");
	update (property);
end

rule "NotRewired"
dialect "mvel"
no-loop true
agenda-group "eligibility"
when
	property : Property(age > 80, electrictSystemRenovated == false ) 
then	
	property.setStatus("HOLD");
	update (property);
end

rule "calculateQuote"
dialect "mvel"
no-loop true
agenda-group "calculation"
when
	property : Property( status == "" ) 
then	
	Quote q = new Quote();
	q.setId(1);
	q.setAmount(486.95);
	property.setQuoteId(1);
	update (property);
	insert (q);
end